import sqlite3
import telebot
from datetime import datetime
import threading
import time
import json
import os
from telebot import types

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
USER_BOT_TOKEN = '7666013679:AAGyEqPBBKKVti_erPzdkxtg8CmF9q-oxXc'
OPERATOR_BOT_TOKEN = '8157310546:AAEdJ6AZNwqEVsU_uVeMZbZoSF1Al7rTCnw'
OPERATOR_CHAT_IDS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
AUTH_FILE = "operators.json"  # –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
# ==================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
user_bot = telebot.TeleBot(USER_BOT_TOKEN)
operator_bot = telebot.TeleBot(OPERATOR_BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('events.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS applications (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    event_description TEXT,
    event_dates TEXT,
    full_name TEXT,
    contact_info TEXT,
    timestamp DATETIME
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS broadcasts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    message TEXT,
    timestamp DATETIME
)
''')
conn.commit()


# ========== –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==========
def load_auth_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    if not os.path.exists(AUTH_FILE):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        sample_data = {
            "operators": [
                {"login": "admin", "password": "admin123"},
                {"login": "operator1", "password": "pass123"}
            ]
        }
        with open(AUTH_FILE, 'w', encoding='utf-8') as f:
            json.dump(sample_data, f, indent=2)
        return sample_data

    with open(AUTH_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def authenticate(login, password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    auth_data = load_auth_data()
    for operator in auth_data.get('operators', []):
        if operator['login'] == login and operator['password'] == password:
            return True
    return False


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
OPERATOR_STATES = {}


# ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ë–û–¢ ==========
@user_bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. "
        "–°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏ –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /form —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."
    )
    user_bot.reply_to(message, welcome_text)


@user_bot.message_handler(commands=['form'])
def request_form(message):
    form_instructions = (
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (4 —Å—Ç—Ä–æ–∫–∏):\n\n"
        "1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "2. –°—Ä–æ–∫–∏\n"
        "3. –í–∞—à–µ –§–ò–û\n"
        "4. –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ IT\n"
        "15-20 —Å–µ–Ω—Ç—è–±—Ä—è 2023 –≥–æ–¥–∞\n"
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
        "@username –∏–ª–∏ +71234567890"
    )
    msg = user_bot.reply_to(message, form_instructions)
    user_bot.register_next_step_handler(msg, process_application)


def process_application(message):
    try:
        data = message.text.split('\n')
        if len(data) < 4:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

        event_description = data[0].strip()
        event_dates = data[1].strip()
        full_name = data[2].strip()
        contact_info = data[3].strip()

        user_id = message.from_user.id
        username = message.from_user.username if message.from_user.username else "N/A"

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('''
        INSERT INTO applications 
        (user_id, username, event_description, event_dates, full_name, contact_info, timestamp)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, username, event_description, event_dates, full_name, contact_info, timestamp))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        app_id = cursor.lastrowid
        notify_operators(app_id, message)

        user_bot.reply_to(message, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    except Exception as e:
        error_message = (
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ "
            "–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (4 —Å—Ç—Ä–æ–∫–∏).\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /form"
        )
        user_bot.reply_to(message, error_message)
        print(f"–û—à–∏–±–∫–∞: {str(e)}")


def notify_operators(app_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º"""
    if OPERATOR_CHAT_IDS:
        keyboard = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É",
            callback_data=f"view_{app_id}"
        )
        keyboard.add(btn)

        for chat_id in OPERATOR_CHAT_IDS:
            try:
                operator_bot.send_message(
                    chat_id,
                    "üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!",
                    reply_markup=keyboard
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {chat_id}: {str(e)}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π chat_id –∏–∑ —Å–ø–∏—Å–∫–∞
                OPERATOR_CHAT_IDS.discard(chat_id)


# ========== –û–ü–ï–†–ê–¢–û–†–°–ö–ò–ô –ë–û–¢ ==========
@operator_bot.message_handler(commands=['start'])
def operator_start(message):
    chat_id = message.chat.id
    if chat_id in OPERATOR_CHAT_IDS:
        operator_bot.reply_to(message, "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    OPERATOR_STATES[chat_id] = {'state': 'waiting_login'}
    operator_bot.send_message(chat_id,
                              "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞-–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")


def check_auth(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    if chat_id not in OPERATOR_CHAT_IDS:
        operator_bot.send_message(chat_id, "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return False
    return True


@operator_bot.message_handler(func=lambda message: True)
def handle_operator_messages(message):
    chat_id = message.chat.id
    text = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if chat_id in OPERATOR_STATES:
        state = OPERATOR_STATES[chat_id]['state']

        if state == 'waiting_login':
            OPERATOR_STATES[chat_id] = {
                'state': 'waiting_password',
                'login': text
            }
            operator_bot.send_message(chat_id, "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

        elif state == 'waiting_password':
            login = OPERATOR_STATES[chat_id]['login']
            password = text

            if authenticate(login, password):
                OPERATOR_CHAT_IDS.add(chat_id)
                operator_bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.")
                del OPERATOR_STATES[chat_id]
            else:
                operator_bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start")
                del OPERATOR_STATES[chat_id]
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if text.startswith('/rs'):
        if not check_auth(chat_id):
            return
        broadcast_message(message)
    elif text == '/start':
        operator_start(message)
    else:
        if not check_auth(chat_id):
            return
        operator_bot.send_message(chat_id,
                                  "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/rs - –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n/form - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏")


@operator_bot.callback_query_handler(func=lambda call: call.data.startswith('view_'))
def view_application(call):
    chat_id = call.message.chat.id
    if not check_auth(chat_id):
        return

    app_id = call.data.split('_')[1]
    cursor.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
    application = cursor.fetchone()

    if application:
        app_text = (
            f"üìù –ó–∞—è–≤–∫–∞ #{application[0]}\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{application[2]} (ID: {application[1]})\n"
            f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {application[7]}\n\n"
            f"1. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {application[3]}\n"
            f"2. –°—Ä–æ–∫–∏: {application[4]}\n"
            f"3. –§–ò–û: {application[5]}\n"
            f"4. –ö–æ–Ω—Ç–∞–∫—Ç—ã: {application[6]}"
        )
        operator_bot.send_message(chat_id, app_text)
    else:
        operator_bot.send_message(chat_id, "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def broadcast_message(message):
    chat_id = message.chat.id
    if not check_auth(chat_id):
        return

    broadcast_text = message.text.replace('/rs', '', 1).strip()
    if not broadcast_text:
        operator_bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /rs")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute('''
    INSERT INTO broadcasts (message, timestamp)
    VALUES (?, ?)
    ''', (broadcast_text, timestamp))
    conn.commit()

    operator_bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{broadcast_text}")


# ========== –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò ==========
def broadcast_sender():
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute("SELECT * FROM broadcasts")
            broadcasts = cursor.fetchall()

            for broadcast in broadcasts:
                broadcast_id = broadcast[0]
                message_text = broadcast[1]

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute("SELECT DISTINCT user_id FROM applications")
                users = cursor.fetchall()

                for user in users:
                    try:
                        user_bot.send_message(user[0], f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{message_text}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {str(e)}")

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ (—É–¥–∞–ª—è–µ–º)
                cursor.execute("DELETE FROM broadcasts WHERE id = ?", (broadcast_id,))
                conn.commit()

                print(f"–†–∞—Å—Å—ã–ª–∫–∞ #{broadcast_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
            time.sleep(60)


# ========== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ==========
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    load_auth_data()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    threading.Thread(target=broadcast_sender, daemon=True).start()


    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    def run_user_bot():
        user_bot.infinity_polling()


    def run_operator_bot():
        operator_bot.infinity_polling()


    t1 = threading.Thread(target=run_user_bot)
    t2 = threading.Thread(target=run_operator_bot)

    t1.start()
    t2.start()

    t1.join()
    t2.join()